name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_NAME: squarespheres-platform
  REGISTRY: ghcr.io
  IMAGE_NAME: squarespheres/squarespheres-platform

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Build frontend
      run: npm run build
    
    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: squarespheres-platform-frontend-dist
        path: frontend/dist/
        retention-days: 7

  test-wasm:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-wasm-${{ env.PROJECT_NAME }}-${{ hashFiles('wasm-app/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-wasm-${{ env.PROJECT_NAME }}-
          ${{ runner.os }}-cargo-wasm-
    
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    
    - name: Build WASM
      run: |
        cd wasm-app
        wasm-pack build --target web --out-dir ../frontend/src/wasm
    
    - name: Upload WASM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: squarespheres-platform-wasm-dist
        path: frontend/src/wasm/
        retention-days: 7

  test-signaling-server:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./signaling-server
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Restore dependencies
      run: dotnet restore Source/SignalingServer.csproj
    
    - name: Build signaling server
      run: dotnet build Source/SignalingServer.csproj --no-restore
    
    - name: Run tests
      run: dotnet test Tests/SignalingServer.Tests.csproj --no-build --verbosity normal

  build-docker-images:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-wasm, test-signaling-server]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download WASM artifacts
      uses: actions/download-artifact@v4
      with:
        name: squarespheres-platform-wasm-dist
        path: frontend/src/wasm/
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Extract metadata for signaling-server
      id: meta-signaling
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-signaling
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
    
    - name: Build and push signaling-server image
      uses: docker/build-push-action@v5
      with:
        context: ./signaling-server
        push: true
        tags: ${{ steps.meta-signaling.outputs.tags }}
        labels: ${{ steps.meta-signaling.outputs.labels }}
