name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_NAME: squarespheres-platform

jobs:
  build-wasm:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./wasm-app
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-wasm-${{ env.PROJECT_NAME }}-${{ hashFiles('wasm-app/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-wasm-${{ env.PROJECT_NAME }}-
          ${{ runner.os }}-cargo-wasm-
    
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    
    - name: Build WASM
      run: wasm-pack build --target web --out-dir ../frontend/src/wasm
    
    - name: Upload WASM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wasm-files
        path: ../frontend/src/wasm/

  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run tests
      run: npm test

  build-frontend:
    runs-on: ubuntu-latest
    needs: [build-wasm, test-frontend]
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download WASM artifacts
      uses: actions/download-artifact@v4
      with:
        name: wasm-files
        path: ./src/wasm/
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build frontend
      run: SKIP_WASM=1 npm run build
    

  test-signaling-server:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./signaling-server
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Restore dependencies
      run: dotnet restore SignalingServer.sln
    
    - name: Restore .NET tools
      run: dotnet tool restore
    
    - name: Check code formatting with CSharpier
      run: dotnet csharpier check .
    
    - name: Build solution
      run: dotnet build SignalingServer.sln --no-restore
    
    - name: Run tests
      run: dotnet test SignalingServer.sln --no-build --verbosity normal

  deploy-signaling-server:
    runs-on: ubuntu-latest
    needs: test-signaling-server
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for signaling server changes
      id: changes
      uses: dorny/paths-filter@v2
      with:
        filters: |
          signaling-server:
            - 'signaling-server/**'
    
    - name: Setup Fly.io CLI
      if: steps.changes.outputs.signaling-server == 'true'
      uses: superfly/flyctl-actions/setup-flyctl@master
    
    - name: Deploy to Fly.io
      if: steps.changes.outputs.signaling-server == 'true'
      run: flyctl deploy --remote-only
      working-directory: ./signaling-server
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

